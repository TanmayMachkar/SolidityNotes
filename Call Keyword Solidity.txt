Call solidity

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Receiver{
    event Received(address caller, uint amount, string message);

    fallback() external payable { 
        emit Received(msg.sender, msg.value, "Fallback was called");
    }

    function foo(string memory _message, uint _x) public payable returns(uint){
        emit Received(msg.sender, msg.value, _message);
        return _x+1;
    }
}

contract Caller{
    event Response(bool success, bytes data);

    //Assume that contract Caller doesn't have the source code for the
    //contract Receiver, but we know the address of contract Receiver and the 
    //function to call.
    function testCallFoo(address payable _addr) public payable {
        //you can send ether and specify a custom gas amount
        (bool success, bytes memory data) = _addr.call{value: msg.value, gas: 5000}(
            abi.encodeWithSignature("foo(string, uint256)", "call foo", 123)
        );
        emit Response(success, data);
    }
    // if you have a function called someFunction in another contract that takes a single uint256 parameter, you would call abi.encodeWithSignature() like this:
    // abi.encodeWithSignature("someFunction(uint256)", 123);
    // This generates the function signature for the function someFunction with a uint256 parameter and encodes the value 123 as its argument.

    //calling a function that does not exist triggers the fallback function.
    function testCallDoesNotExist(address _addr) public payable{
        (bool success, bytes memory data) = _addr.call{value: msg.value}(
            abi.encodeWithSignature("doesNotExist()")
        );
        emit Response(success, data);
    }
}
 