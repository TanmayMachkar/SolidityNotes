Try catch solidity

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract Foo{
    address public owner;

    constructor(address _owner){
        require(_owner != address(0), "invalid address"); //address(0) is address with zero/null bytes
        assert(_owner != 0x0000000000000000000000000000000000000001);
        owner = _owner;
    }

    function myFunc(uint x) public pure returns (string memory){
        require(x != 0, "require failed");
        return "myFunc was called";
    }
}

contract Bar{
    event Log(string message);
    event LogBytes(bytes data);

    Foo public foo;

    constructor(){
        //This Foo function is used for example of try catch with external call
        foo = new Foo(msg.sender);
    }

    //Example of try/catch with external call
    //tryCatchExternalCall(0) => Log("external call failed")
    //tryCatchExternalCall(1) => Log("myFunc was called")
    function tryCatchExternalCall(uint _i) public{
        try foo.myFunc(_i) returns (string memory result){
            emit Log(result);
        } catch {
            emit Log("external call failed");
        }
    }

    function tryCatchNewContract(address _owner) public{
        try new Foo(_owner) returns (Foo foo){
            //you can use variable foo here
            emit Log("Foo created");
        } catch Error(string memory reason){
            //catch failing revert() and require()
            emit Log(reason);
        } catch (bytes memory reason){
            emit LogBytes(reason);
        }
    }
}


 